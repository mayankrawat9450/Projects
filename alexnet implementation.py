# -*- coding: utf-8 -*-
"""Alexnet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DJjtPhYIxHB8bvihgaG_gbG27KHhUOGC
"""

import torch
import torch.nn as nn
from torchview import draw_graph
import numpy as np
import torch
import torchvision
import torchvision.transforms as transforms
import gc
from tqdm import tqdm

class AlexNet(nn.Module):
    def __init__(self, num_class=10, dropout:float = 0.5 ):
        super().__init__()

        self.feature_extraction = nn.Sequential(

               nn.Conv2d(in_channels=3,out_channels=96,kernel_size=11,stride=4,padding='valid'),
               nn.BatchNorm2d(96),
               nn.ReLU(inplace= True),
               nn.MaxPool2d(kernel_size=3,stride=2),
               #second conlv layer
               nn.Conv2d(in_channels=96,out_channels=256,kernel_size=3,stride=1,padding='same'),
               nn.BatchNorm2d(256),
               nn.ReLU(inplace= True),
               nn.MaxPool2d(kernel_size=3,stride=2),
               #third layer
               nn.Conv2d(in_channels=256,out_channels=384,kernel_size=3,stride=1,padding='same'),
               nn.BatchNorm2d(384),
               nn.ReLU(inplace = True),
               #fourth layer
               nn.Conv2d(in_channels=384,out_channels=256,kernel_size=3,stride=1,padding='same'),
               nn.BatchNorm2d(256),
               nn.ReLU(inplace = True),
               #fifth layer
               nn.Conv2d(in_channels=256,out_channels=256,kernel_size=3,stride=1,padding='same'),
               nn.BatchNorm2d(256),
               nn.ReLU(inplace = True),
               nn.MaxPool2d(kernel_size=3,stride=2),





        )

        self.classifier = nn.Sequential(
            nn.Linear(in_features=256*6*6,out_features= 256*6*6),
            nn.ReLU(inplace = True),
            nn.Dropout(p = dropout),

            nn.Linear(in_features=256*6*6,out_features= 256*6*6),
            nn.ReLU(inplace = True),
            nn.Dropout(p = dropout),
            nn.Linear(in_features=256*6*6,out_features= num_class),





        )
    def forward(self,x:torch.Tensor)-> torch.Tensor:

            x= self.feature_extraction(x)
            x= torch.flatten(x,1)
            x= self.classifier(x)
            return x

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = AlexNet().to(device)

transform = transforms.Compose(
    [transforms.Resize(227),
     transforms.RandomCrop(227, padding=4),
     transforms.RandomHorizontalFlip(),
     transforms.RandomRotation(15),
     transforms.ToTensor(),
     transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))])

train_dataset = torchvision.datasets.CIFAR10(root='./data',train=True,
                                             download=True,transform=transform)

test_dataset = torchvision.datasets.CIFAR10(root='./data',train=False,
                                            download=True, transform=transform)

train_loader = torch.utils.data.DataLoader(train_dataset,batch_size=128,shuffle=True, pin_memory=True)

test_loader = torch.utils.data.DataLoader(test_dataset,batch_size=128,shuffle=False)

classes = ('plane','car','bird','cat','deer','dog','frog','horse','ship','truck')

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)


num_epochs = 200
best_acc = 0.0

for epoch in range(num_epochs):

    gc.collect()
    torch.cuda.empty_cache()

    model.train()
    running_loss = 0.0
    correct = 0
    total = 0

    progress_bar = tqdm(train_loader, desc=f"Epoch {epoch+1}/{num_epochs}")

    for images, labels in progress_bar:
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

        progress_bar.set_postfix(loss=loss.item(), acc=100 * correct / total)

    train_acc = 100 * correct / total
    if train_acc > best_acc:
        best_acc = train_acc
        print(f"ðŸŽ¯ New Best Accuracy: {best_acc:.2f}%")

    print(f"Epoch [{epoch+1}/{num_epochs}] Finished â€” Train Accuracy: {100 * correct / total:.2f}%")
